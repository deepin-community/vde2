--- a/include/libvdeplug_dyn.h
+++ b/include/libvdeplug_dyn.h
@@ -57,6 +57,25 @@
 #include <dlfcn.h>
 #define LIBVDEPLUG_INTERFACE_VERSION 1
 
+/*
+ * Define the dlopen default filename as the versioned shared object name
+ * instead than the plain ".so" filename. This is needed on Debian as the
+ * unversioned symlink (e.g. "libvdeplug.so") is not included in the binary
+ * package but only in the development one.
+ *
+ * libvdeplug can work flawlessly without specifying the SONAME as the interface
+ * is meant to be always backwards-compatible; however, the Debian policy is
+ * against putting .so symlinks in the binary packages as in general is not safe
+ * to link or dlopen unversioned shared objects.
+ *
+ * If this header file is used to generate binaries meant to be used on other
+ * distributions, it could be safe to redefine LIBVDEPLUG_DLOPEN_FILENAME with
+ * the unversioned name.
+ */
+#ifndef LIBVDEPLUG_DLOPEN_FILENAME
+#define LIBVDEPLUG_DLOPEN_FILENAME "libvdeplug.so.2"
+#endif
+
 struct vdeconn;
 typedef struct vdeconn VDECONN;
 
@@ -113,7 +132,7 @@
 typedef void (* VDESTREAM_CLOSE_T)(VDESTREAM *vdestream);
 
 #define libvdeplug_dynopen(x) ({ \
-	(x).dl_handle=dlopen("libvdeplug.so",RTLD_NOW); \
+	(x).dl_handle=dlopen(LIBVDEPLUG_DLOPEN_FILENAME,RTLD_NOW); \
 	if ((x).dl_handle) { \
 		(x).vde_open_real=(VDE_OPEN_REAL_T) dlsym((x).dl_handle,"vde_open_real"); \
 		(x).vde_recv=(VDE_RECV_T) dlsym((x).dl_handle,"vde_recv"); \
